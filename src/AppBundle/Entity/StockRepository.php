<?php

namespace AppBundle\Entity;
use Doctrine\ORM\EntityRepository;
use ConfigBundle\Controller\UtilsController;

/**
 * StockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRepository extends EntityRepository {
    /*
     * Listado para inventario
     */

    public function getStockTipoDeposito($tipoId = NULL, $depId = NUlL) {
        $query = $this->_em->createQueryBuilder('s')
                ->select('s')
                ->from('AppBundle\Entity\Stock', 's')
                ->innerJoin('s.insumo', 'i')
                ->innerJoin('i.tipo', 't')
                ->orderBy('t.nombre');
        if ($tipoId) {
            $query->andWhere('t.id=:tipoId')
                    ->setParameter('tipoId', $tipoId);
        }
        if ($depId) {
            $query->innerJoin('s.deposito', 'd')
                    ->andWhere('d.id=:depId')
                    ->setParameter('depId', $depId);
        }
        return $query->getQuery()->getResult();
    }

    /**
     * Encontrar en stock por insumo y deposito
     */
    public function findInsumoDeposito($prodId, $depId) {
        $query = $this->_em->createQueryBuilder('s')
                ->select('s')
                ->from('AppBundle\Entity\Stock', 's')
                ->innerJoin('s.insumo', 'p')
                ->innerJoin('s.deposito', 'd')
                ->where('p.id=:prodId')
                ->andWhere('d.id=:depId')
                ->setParameter('prodId', $prodId)
                ->setParameter('depId', $depId);
        return $query->getQuery()->getOneOrNullResult();
    }

    /*
     * ajustes para listado
     */

    public function findAjusteByCriteria($depositoId = NULL, $desde = NULL, $hasta = NULL) {
        $query = $this->_em->createQueryBuilder();
        $query->select('a')
                ->from('AppBundle\Entity\StockAjuste', 'a');

        if ($depositoId) {
            $query->innerJoin('a.deposito', 'd')
                    ->andWhere('d.id=' . $depositoId);
        }
        if ($desde) {
            $cadena = " a.fecha >= '" . UtilsController::toAnsiDate($desde) . "'";
            $query->andWhere($cadena);
        }
        if ($hasta) {
            $cadena = " a.fecha <= '" . UtilsController::toAnsiDate($hasta) . "'";
            $query->andWhere($cadena);
        }

        return $query->getQuery()->getResult();
    }

    /*
     * Insumos para listado de historico de stock
     */

    public function findByCriteria($data, $desde, $hasta) {
        $query = $this->_em->createQueryBuilder();
        $query->select('m')
                ->from('AppBundle\Entity\StockHistorico', 'm')
                ->innerJoin('m.insumo', 'i')
                //->innerJoin('m.deposito', 'd')
                ->orderBy('m.fecha, m.id');
        if ($data['idTipo']) {
            $query->innerJoin('i.tipo', 't')
                    ->andWhere('t.id=' . $data['idTipo']);
        }
        if ($data['idMarca']) {
            $query->innerJoin('i.marca', 'ma')
                    ->andWhere('ma.id=' . $data['idMarca']);
            if ($data['idModelo']) {
                $query->innerJoin('i.modelo', 'mo')
                        ->andWhere('mo.id=' . $data['idModelo']);
            }
        }

        if ($desde) {
            $cadena = " m.fecha >= '" . UtilsController::toAnsiDate($desde) . "'";
            $query->andWhere($cadena);
        }
        if ($hasta) {
            $cadena = " m.fecha <= '" . UtilsController::toAnsiDate($hasta) . "'";
            $query->andWhere($cadena);
        }

        return $query->getQuery()->getResult();
    }

    /*
     * Movimientos interdepÃ³sito
     */

    public function findMovimientosByCriteria($desde = NULL, $hasta = NULL) {
        $query = $this->_em->createQueryBuilder();
        $query->select('m')
                ->from('AppBundle\Entity\StockMovimiento', 'm');

        if ($desde) {
            $cadena = " m.fecha >= '" . UtilsController::toAnsiDate($desde) . "'";
            $query->andWhere($cadena);
        }
        if ($hasta) {
            $cadena = " m.fecha <= '" . UtilsController::toAnsiDate($hasta) . "'";
            $query->andWhere($cadena);
        }

        return $query->getQuery()->getResult();
    }

    /*
     * Cantidad en stock por producto y deposito
     */

    public function getStockProductoDeposito($id, $dep) {
        $query = $this->_em->createQueryBuilder('s')
                ->select('SUM(s.cantidad)')
                ->from('AppBundle\Entity\Stock', 's')
                ->innerJoin('s.producto', 'p')
                ->innerJoin('s.deposito', 'd')
                ->where('p.id=:prodId')
                ->andWhere('d.id=:depId')
                ->setParameter('prodId', $id)
                ->setParameter('depId', $dep);
        return $query->getQuery()->getSingleScalarResult();
    }

    /*
     * Listado Historico de stock agrupados por movimiento.
     */

    public function getGroupMovimientos() {
        $query = $this->_em->createQueryBuilder('m')
                ->select('m.fecha, d.nombre deposito, m.tipo, m.movimiento, count(m.id) cantidad, 0 signo, 0 detalle, 0 tipomov')
                ->from('AppBundle\Entity\StockHistorico', 'm')
                ->innerJoin('m.deposito', 'd')
                ->groupBy('m.fecha, d.nombre, m.tipo, m.movimiento');
        return $query->getQuery()->getArrayResult();
    }

    /*
     * Detalle de historico
     */

    public function getDetalleMovimiento($tipo, $mov) {
        $query = $this->_em->createQueryBuilder('m')
                ->select('m')
                ->from('AppBundle\Entity\StockHistorico', 'm')
                ->where('m.tipo=:arg1')
                ->andWhere('m.movimiento=:arg2')
                ->setParameter('arg1', $tipo)
                ->setParameter('arg2', $mov);
        return $query->getQuery()->getResult();
    }

    /* public function getLotesByProdDep($prodId,$depId){
      $query = $this->_em->createQueryBuilder('s')
      ->select('s')
      ->from('CM\AdminBundle\Entity\Stock','s')
      ->innerJoin('s.producto', 'p')
      ->innerJoin('s.deposito', 'd')
      ->where('p.id=:prodId')
      ->andWhere('d.id=:depId')
      ->andWhere('s.cantidad>0')
      ->orderBy('s.created')
      ->setParameter('prodId', $prodId)
      ->setParameter('depId', $depId);
      return $query->getQuery()->getResult();
      } */

    public function getAjustesByCriteria($depId, $periodo) {
        $query = $this->_em->createQueryBuilder();
        $query->select('a')
                ->from('AppBundle\Entity\StockAjuste', 'a')
                ->innerJoin('a.deposito', 'd')
                ->where('d.id=' . $depId)
                ->andWhere("a.fecha>='" . UtilsController::toAnsiDate($periodo['desde']) . " 00:00'")
                ->andWhere("a.fecha<='" . UtilsController::toAnsiDate($periodo['hasta']) . " 23:59'");
        return $query->getQuery()->getResult();
    }

    public function findHistoricos($criteria) {
        $query = $this->_em->createQueryBuilder();
        $query->select('h')
                ->from('AppBundle\Entity\StockHistorico', 'h')
                ->innerJoin('h.insumo', 'i')
                ->where('1=1')
                ->orderBy('h.fecha, h.id');

        if ($criteria['insumoId']) {
            $query->andWhere("i.id=" . $criteria['insumoId']);
        }
        if ($criteria['desde']) {
            $cadena = " h.fecha >= '" . UtilsController::toAnsiDate($criteria['desde']) . "'";
            $query->andWhere($cadena);
        }
        if ($criteria['hasta']) {
            $cadena = " h.fecha <= '" . UtilsController::toAnsiDate($criteria['hasta']) . "'";
            $query->andWhere($cadena);
        }
        return $query->getQuery()->getResult();
    }

    /*
     * PARA REPORTE DE SOLICITUDES DE INSUMO
     */

    public function getMovimientosInsumosParaSoporte($filtro) {
        $query = $this->_em->createQueryBuilder();
        $query->select('h')
                ->from('AppBundle\Entity\StockHistorico', 'h')
                ->innerJoin('AppBundle\Entity\InsumoxTarea', 'it', 'WITH', 'it.id=h.movimiento')
                ->where("h.tipo='SOPORTE'");
        if ($filtro['selTipos']) {
            $query->innerJoin('h.insumo', 'i')
                    ->innerJoin('i.tipo', 't')
                    ->andWhere(' t.id IN (:tipos)')
                    ->setParameter('tipos', $filtro['selTipos'], \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
        }
        if ($filtro['selUbicaciones']) {
            $query->innerJoin('it.tarea', 't')
                    ->innerJoin('t.ordenTrabajo', 'ot')
                    ->innerJoin('ot.requerimiento', 'r')
                    ->innerJoin('r.solicitante', 's')
                    ->innerJoin('s.edificio', 'e')
                    ->innerJoin('e.ubicacion', 'u')
                    ->andWhere('u.id IN (:ubicaciones)')
                    ->setParameter('ubicaciones', $filtro['selUbicaciones'], \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
            if ($filtro['selEdificios']) {
                $query->andWhere('e.id IN (:edificios)')
                        ->setParameter('edificios', $filtro['selEdificios'], \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
                ;
                if ($filtro['selDepartamento']) {
                    $query->andWhere(' s.id IN (:deptos)')
                            ->setParameter('deptos', $filtro['selDepartamento'], \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
                }
            }
        }
        if ($filtro['desde']) {
            $cadena = " h.fecha >= '" . UtilsController::toAnsiDate($filtro['desde']) . "'";
            $query->andWhere($cadena);
        }
        if ($filtro['hasta']) {
            $cadena = " h.fecha <= '" . UtilsController::toAnsiDate($filtro['hasta']) . "'";
            $query->andWhere($cadena);
        }
        return $query->getQuery()->getResult();
    }

}